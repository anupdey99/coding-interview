Write a function that does the following task.
You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string. Return the shuffled string.
Also, mention the Time and Space Complexity of your solution

Constraints:
s.length == indices.length == n
1 <= n <= 100
s consists of only lowercase English letters.
0 <= indices[i] < n
All values of indices are unique.

Example 1:
Input: s = "mamacode", indices = [4,5,6,7,0,1,2,3]
Output: "codemama"
Explanation: As shown, "mamacode" becomes "codemama" after shuffling.

Example 2:
Input: s = "dosta", indices = [4,0,1,2,3]
Output: "ostad"
Explanation: After shuffling, each character remains in its position.

Example 3:
Input: s = "abc", indices = [1,0,2]
Output: "bac"
Explanation: After shuffling, each character remains in its position.

Solution

def shuffleString(s, indices):
    n = len(s)
    shuffled = [''] * n
    
    # Fill the shuffled array according to indices
    for i in range(n):
        shuffled[indices[i]] = s[i]
    
    # Join the shuffled array into a string
    shuffled_string = ''.join(shuffled)
    
    return shuffled_string

# Test cases
print(restoreString("mamacode", [4,5,6,7,0,1,2,3]))  # Output: "codemama"
print(restoreString("dosta", [4,0,1,2,3]))            # Output: "ostad"
print(restoreString("abc", [1,0,2]))                  # Output: "bac"

Time complexity:
The time complexity of this function is O(n), where n is the length of the input string s

Space Complexity:
The space complexity is also O(n)
